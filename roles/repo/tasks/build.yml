---
#--------------------------------------------------------------#
# 3.1   Remove existing upstream repo files        [repo_remove]
#--------------------------------------------------------------#
- name: remove existing repo before build
  tags: [ repo_upstream, repo_remove ]
  when: repo_remove|bool
  shell: |
      mkdir -p /etc/apt/sources.list.d/backup/
      mv -f /etc/apt/sources.list /etc/apt/sources.list.d/backup/
      mv -f /etc/apt/sources.list.d/* /etc/apt/sources.list.d/backup/
      rm -f /etc/apt/sources.list.d/* || /bin/true

#--------------------------------------------------------------#
# 3.2  Add required upstream repo files               [repo_add]
#--------------------------------------------------------------#
- name: add pigsty upstream repo file
  tags: [ repo_upstream , repo_add,test ]
  copy:
    dest: /etc/apt/sources.list.d/{{ item.name }}.list
    content: |
      {% for i in item.releases %}
      {% if region in item.baseurl and item.baseurl[region] != '' %}
      deb [trusted=yes] {{ item.baseurl[region] }} {{i}} {{item.directory}} {% if item.name == 'base' %} restricted universe multiverse 
      {% else %}
      {% endif%}
      {% else %}
      deb [trusted=yes] {{ item.baseurl.default }} {{i}} {% if item.name== 'nginx' %} nginx {%else%} main {% endif %} {% if item.name == 'base' %} restricted universe multiverse 
      {%else%} 
      {% endif%}
      {% endif%}
      {% endfor %}
  # when: os_version|int in item.releases and item.module in repo_modules.split(',')
  with_items: "{{ repo_upstream }}"

# #--------------------------------------------------------------#
# # 3.3  Download url packages                      [repo_url_pkg]
# #--------------------------------------------------------------#
# # download packages directly via url (replace ${releasever} to 7|8|9)
# - name: download repo url packages
#   tags: repo_url_pkg
#   ignore_errors: true
#   environment: "{{ proxy_env }}"
#   get_url: dest={{ repo_home }}/{{ repo_name }}/ url={{ item | replace('${releasever}', os_version|string) | replace('${arch}', os_arch|string ) }}
#   with_items: "{{ repo_url_packages }}"

#--------------------------------------------------------------#
# 3.4 Make repo cache                               [repo_cache]
#--------------------------------------------------------------#
# this usually takes 1~2 minutes, according to your network condition and region & mirrors
- name: remake repo cache
  tags: repo_cache
  environment: "{{ proxy_env|default({}) }}"
  shell: |
    apt-get clean;
    apt-get update >/tmp/a.log 2>&1
    /bin/true

#--------------------------------------------------------------#
# 3.5  Download bootstrap packages               [repo_boot_pkg]
#--------------------------------------------------------------#
- name: install repo boot packages
  tags: repo_boot_pkg
  environment: "{{ proxy_env|default({}) }}"
  apt: name="dpkg-dev" state=present

#--------------------------------------------------------------#
# 3.6 Download rpm Packages                           [repo_pkg]
#--------------------------------------------------------------#
- name: download repo packages
  tags: repo_pkg
  environment: "{{ proxy_env }}"
  shell:
    cmd: |
      apt-get download $(apt-cache depends --recurse --no-recommends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances {{item}}| grep "^\w" | sort -u)
    chdir: "{{ repo_home }}/{{ repo_name }}"
  with_items: "{{ repo_packages }}"

#--------------------------------------------------------------#
# 3.7 Create repo                                  [repo_create]
#--------------------------------------------------------------#
# create local apt repo
- name: create local repo
  tags: repo_create
  shell:
    cmd: |
      #!/bin/bash
      dpkg-scanpackages . /dev/null|gzip -9c > Packages.gz
    chdir: "{{ repo_home }}/{{ repo_name }}"

#--------------------------------------------------------------#
# 3.8 Use built repo                                  [repo_use]
#--------------------------------------------------------------#
- name: use built local repo
  tags: repo_use
  shell: |
    rm -f /etc/apt/sources.list
    rm -f /etc/apt/sources.list.d/* || /bin/true
    cat > /etc/apt/sources.list <<-'EOF'
    deb [trusted=yes] file:///{{ repo_home }}/{{ repo_name }}/ ./
    EOF
    apt-get update;
    apt-get -y install wget sshpass nginx;
    /bin/true;
...